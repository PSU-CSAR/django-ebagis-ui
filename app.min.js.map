{"version":3,"sources":["app/app.ts","auth/auth.ts","auth/controllers/authrequired.ts","auth/controllers/login.ts","auth/controllers/logout.ts","auth/controllers/main.ts","auth/controllers/master.ts","auth/controllers/passwordchange.ts","auth/controllers/passwordreset.ts","auth/controllers/passwordresetconfirm.ts","auth/controllers/register.ts","auth/controllers/restricted.ts","auth/controllers/userprofile.ts","auth/controllers/verifyemail.ts","auth/services/djangoAuth.ts","auth/services/validate.ts","templates.ts"],"names":["angular","module","config","$routeProvider","when","templateUrl","controller","resolve","authenticated","djangoAuth","authenticationStatus","otherwise","redirectTo","run","initialize","$scope","awesomeThings","$location","Validate","model","username","password","complete","login","formData","errors","form_validation","$invalid","then","data","path","logout","$cookies","prompt","handleSuccess","handleError","resetPassword","register","verify","goVerify","changePassword","profile","updateProfile","first_name","last_name","email","confirmReset","goConfirmReset","response","show_login","$on","ev","current","previous","rejection","console","error","replace","new_password1","new_password2","$routeParams","password1","password2","success","failure","service","$q","$http","$rootScope","API_URL","use_session","authPromise","request","args","get","defaults","headers","common","Authorization","params","deferred","defer","url","this","method","withCredentials","toUpperCase","X-CSRFToken","bind","status","log","reject","promise","more","extend","key","put","$broadcast","remove","uid","token","restrict","force","da","getAuthStatus","sessions","message","minlength","maxlength","required","more_messages","demo","check_more_messages","name","validation_messages","field","form","error_bin","messages","e","$error","special_message","push","deduped_messages","forEach","el","i","indexOf","substr","$templateCache"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/main.d.ts\" />\r\n\r\nangular.module('ebagis', [\r\n    'app.templates',\r\n    'auth'\r\n]);\r\n\r\n// your app setup here\r\n","'use strict';\r\n\r\nangular.module('auth', [\r\n  'app.templates',\r\n  'ngCookies',\r\n  'ngResource',\r\n  'ngSanitize',\r\n  'ngRoute',\r\n])\r\n  .config(function ($routeProvider) {\r\n    $routeProvider\r\n      .when('/', {\r\n      templateUrl: 'app-templates/auth/views/main.html',\r\n        controller: 'MainCtrl',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/register', {\r\n        templateUrl: 'app-templates/auth/views/register.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/passwordReset', {\r\n        templateUrl: 'app-templates/auth/views/passwordreset.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/passwordResetConfirm/:firstToken/:passwordResetToken', {\r\n        templateUrl: 'app-templates/auth/views/passwordresetconfirm.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/login', {\r\n        templateUrl: 'app-templates/auth/views/login.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/verifyEmail/:emailVerificationToken', {\r\n        templateUrl: 'app-templates/auth/views/verifyemail.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/logout', {\r\n        templateUrl: 'app-templates/auth/views/logout.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/userProfile', {\r\n        templateUrl: 'app-templates/auth/views/userprofile.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/passwordChange', {\r\n        templateUrl: 'app-templates/auth/views/passwordchange.html',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/restricted', {\r\n        templateUrl: 'app-templates/auth/views/restricted.html',\r\n        controller: 'RestrictedCtrl',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus();\r\n          }],\r\n        }\r\n      })\r\n      .when('/authRequired', {\r\n        templateUrl: 'app-templates/auth/views/authrequired.html',\r\n        controller: 'AuthrequiredCtrl',\r\n        resolve: {\r\n          authenticated: ['djangoAuth', function(djangoAuth){\r\n            return djangoAuth.authenticationStatus(true);\r\n          }],\r\n        }\r\n      })\r\n      .otherwise({\r\n        redirectTo: '/'\r\n      });\r\n  })\r\n  .run(function(djangoAuth){\r\n  djangoAuth.initialize('https://test.ebagis.geog.pdx.edu/api/rest/account', false);\r\n  });\r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angularDjangoRegistrationAuthApp.controller:AuthrequiredCtrl\r\n * @description\r\n * # AuthrequiredCtrl\r\n * Controller of the angularDjangoRegistrationAuthApp\r\n */\r\nangular.module('auth')\r\n  .controller('AuthrequiredCtrl', function ($scope) {\r\n    $scope.awesomeThings = [\r\n      'HTML5 Boilerplate',\r\n      'AngularJS',\r\n      'Karma'\r\n    ];\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('LoginCtrl', function ($scope, $location, djangoAuth, Validate) {\r\n    $scope.model = {'username':'','password':''};\r\n  \t$scope.complete = false;\r\n    $scope.login = function(formData){\r\n      $scope.errors = [];\r\n      Validate.form_validation(formData,$scope.errors);\r\n      if(!formData.$invalid){\r\n        djangoAuth.login($scope.model.username, $scope.model.password)\r\n        .then(function(data){\r\n        \t// success case\r\n        \t$location.path(\"/\");\r\n        },function(data){\r\n        \t// error case\r\n        \t$scope.errors = data;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('LogoutCtrl', function ($scope, $location, djangoAuth) {\r\n    djangoAuth.logout();\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('MainCtrl', function ($scope, $cookies, $location, djangoAuth) {\r\n    \r\n    $scope.login = function(){\r\n      djangoAuth.login(prompt('Username'),prompt('password'))\r\n      .then(function(data){\r\n        handleSuccess(data);\r\n      },handleError);\r\n    }\r\n    \r\n    $scope.logout = function(){\r\n      djangoAuth.logout()\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.resetPassword = function(){\r\n      djangoAuth.resetPassword(prompt('Email'))\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.register = function(){\r\n      djangoAuth.register(prompt('Username'),prompt('Password'),prompt('Email'))\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.verify = function(){\r\n      djangoAuth.verify(prompt(\"Please enter verification code\"))\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.goVerify = function(){\r\n      $location.path(\"/verifyEmail/\"+prompt(\"Please enter verification code\"));\r\n    }\r\n    \r\n    $scope.changePassword = function(){\r\n      djangoAuth.changePassword(prompt(\"Password\"), prompt(\"Repeat Password\"))\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.profile = function(){\r\n      djangoAuth.profile()\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.updateProfile = function(){\r\n      djangoAuth.updateProfile({'first_name': prompt(\"First Name\"), 'last_name': prompt(\"Last Name\"), 'email': prompt(\"Email\")})\r\n      .then(handleSuccess,handleError);\r\n    }\r\n    \r\n    $scope.confirmReset = function(){\r\n      djangoAuth.confirmReset(prompt(\"Code 1\"), prompt(\"Code 2\"), prompt(\"Password\"), prompt(\"Repeat Password\"))\r\n      .then(handleSuccess,handleError);\r\n    }\r\n\r\n    $scope.goConfirmReset = function(){\r\n      $location.path(\"/passwordResetConfirm/\"+prompt(\"Code 1\")+\"/\"+prompt(\"Code 2\"))\r\n    }\r\n    \r\n    var handleSuccess = function(data){\r\n      $scope.response = data;\r\n    }\r\n    \r\n    var handleError = function(data){\r\n      $scope.response = data;\r\n    }\r\n\r\n    $scope.show_login = true;\r\n    $scope.$on(\"djangoAuth.logged_in\", function(data){\r\n      $scope.show_login = false;\r\n    });\r\n    $scope.$on(\"djangoAuth.logged_out\", function(data){\r\n      $scope.show_login = true;\r\n    });\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('MasterCtrl', function ($scope, $location, djangoAuth) {\r\n    // Assume user is not logged in until we hear otherwise\r\n    $scope.authenticated = false;\r\n    // Wait for the status of authentication, set scope var to true if it resolves\r\n    djangoAuth.authenticationStatus(true).then(function(){\r\n        $scope.authenticated = true;\r\n    });\r\n    // Wait and respond to the logout event.\r\n    $scope.$on('djangoAuth.logged_out', function() {\r\n      $scope.authenticated = false;\r\n    });\r\n    // Wait and respond to the log in event.\r\n    $scope.$on('djangoAuth.logged_in', function() {\r\n      $scope.authenticated = true;\r\n    });\r\n    // If the user attempts to access a restricted page, redirect them back to the main page.\r\n    $scope.$on('$routeChangeError', function(ev, current, previous, rejection){\r\n      console.error(\"Unable to change routes.  Error: \", rejection)\r\n      $location.path('/restricted').replace();\r\n    });\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('PasswordchangeCtrl', function ($scope, djangoAuth, Validate) {\r\n    $scope.model = {'new_password1':'','new_password2':''};\r\n  \t$scope.complete = false;\r\n    $scope.changePassword = function(formData){\r\n      $scope.errors = [];\r\n      Validate.form_validation(formData,$scope.errors);\r\n      if(!formData.$invalid){\r\n        djangoAuth.changePassword($scope.model.new_password1, $scope.model.new_password2)\r\n        .then(function(data){\r\n        \t// success case\r\n        \t$scope.complete = true;\r\n        },function(data){\r\n        \t// error case\r\n        \t$scope.errors = data;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('PasswordresetCtrl', function ($scope, djangoAuth, Validate) {\r\n    $scope.model = {'email':''};\r\n  \t$scope.complete = false;\r\n    $scope.resetPassword = function(formData){\r\n      $scope.errors = [];\r\n      Validate.form_validation(formData,$scope.errors);\r\n      if(!formData.$invalid){\r\n        djangoAuth.resetPassword($scope.model.email)\r\n        .then(function(data){\r\n        \t// success case\r\n        \t$scope.complete = true;\r\n        },function(data){\r\n        \t// error case\r\n        \t$scope.errors = data;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('PasswordresetconfirmCtrl', function ($scope, $routeParams, djangoAuth, Validate) {\r\n    $scope.model = {'new_password1':'','new_password2':''};\r\n  \t$scope.complete = false;\r\n    $scope.confirmReset = function(formData){\r\n      $scope.errors = [];\r\n      Validate.form_validation(formData,$scope.errors);\r\n      if(!formData.$invalid){\r\n        djangoAuth.confirmReset($routeParams['firstToken'], $routeParams['passwordResetToken'], $scope.model.new_password1, $scope.model.new_password2)\r\n        .then(function(data){\r\n        \t// success case\r\n        \t$scope.complete = true;\r\n        },function(data){\r\n        \t// error case\r\n        \t$scope.errors = data;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('RegisterCtrl', function ($scope, djangoAuth, Validate) {\r\n  \t$scope.model = {'username':'','password':'','email':''};\r\n  \t$scope.complete = false;\r\n    $scope.register = function(formData){\r\n      $scope.errors = [];\r\n      Validate.form_validation(formData,$scope.errors);\r\n      if(!formData.$invalid){\r\n        djangoAuth.register($scope.model.username,$scope.model.password1,$scope.model.password2,$scope.model.email)\r\n        .then(function(data){\r\n        \t// success case\r\n        \t$scope.complete = true;\r\n        },function(data){\r\n        \t// error case\r\n        \t$scope.errors = data;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angularDjangoRegistrationAuthApp.controller:RestrictedCtrl\r\n * @description\r\n * # RestrictedCtrl\r\n * Controller of the angularDjangoRegistrationAuthApp\r\n */\r\nangular.module('auth')\r\n  .controller('RestrictedCtrl', function ($scope, $location) {\r\n    $scope.$on('djangoAuth.logged_in', function() {\r\n      $location.path('/');\r\n    });\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('UserprofileCtrl', function ($scope, djangoAuth, Validate) {\r\n    $scope.model = {'first_name':'','last_name':'','email':''};\r\n  \t$scope.complete = false;\r\n  \tdjangoAuth.profile().then(function(data){\r\n  \t\t$scope.model = data;\r\n  \t});\r\n    $scope.updateProfile = function(formData, model){\r\n      $scope.errors = [];\r\n      Validate.form_validation(formData,$scope.errors);\r\n      if(!formData.$invalid){\r\n        djangoAuth.updateProfile(model)\r\n        .then(function(data){\r\n        \t// success case\r\n        \t$scope.complete = true;\r\n        },function(data){\r\n        \t// error case\r\n        \t$scope.error = data;\r\n        });\r\n      }\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .controller('VerifyemailCtrl', function ($scope, $routeParams, djangoAuth) {\r\n    djangoAuth.verify($routeParams[\"emailVerificationToken\"]).then(function(data){\r\n    \t$scope.success = true;\r\n    },function(data){\r\n    \t$scope.failure = false;\r\n    });\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .service('djangoAuth', function djangoAuth($q, $http, $cookies, $rootScope) {\r\n    // AngularJS will instantiate a singleton by calling \"new\" on this function\r\n    var service = {\r\n        /* START CUSTOMIZATION HERE */\r\n        // Change this to point to your Django REST Auth API\r\n        // e.g. /api/rest-auth  (DO NOT INCLUDE ENDING SLASH)\r\n        'API_URL': '/api/rest/account',\r\n        // Set use_session to true to use Django sessions to store security token.\r\n        // Set use_session to false to store the security token locally and transmit it as a custom header.\r\n        'use_session': false,\r\n        /* END OF CUSTOMIZATION */\r\n        'authenticated': null,\r\n        'authPromise': null,\r\n        'request': function(args) {\r\n            // Let's retrieve the token from the cookie, if available\r\n            if($cookies.get('token')){\r\n                $http.defaults.headers.common.Authorization = 'Token ' + $cookies.get('token');\r\n            }\r\n            // Continue\r\n            params = args.params || {}\r\n            args = args || {};\r\n            var deferred = $q.defer(),\r\n                url = this.API_URL + args.url,\r\n                method = args.method || \"GET\",\r\n                params = params,\r\n                data = args.data || {};\r\n            // Fire the request, as configured.\r\n            $http({\r\n                url: url,\r\n                withCredentials: this.use_session,\r\n                method: method.toUpperCase(),\r\n                headers: {'X-CSRFToken': $cookies['csrftoken']},\r\n                params: params,\r\n                data: data\r\n            })\r\n            .success(angular.bind(this,function(data, status, headers, config) {\r\n                deferred.resolve(data, status);\r\n            }))\r\n            .error(angular.bind(this,function(data, status, headers, config) {\r\n                console.log(\"error syncing with: \" + url);\r\n                // Set request status\r\n                if(data){\r\n                    data.status = status;\r\n                }\r\n                if(status == 0){\r\n                    if(data == \"\"){\r\n                        data = {};\r\n                        data['status'] = 0;\r\n                        data['non_field_errors'] = [\"Could not connect. Please try again.\"];\r\n                    }\r\n                    // or if the data is null, then there was a timeout.\r\n                    if(data == null){\r\n                        // Inject a non field error alerting the user\r\n                        // that there's been a timeout error.\r\n                        data = {};\r\n                        data['status'] = 0;\r\n                        data['non_field_errors'] = [\"Server timed out. Please try again.\"];\r\n                    }\r\n                }\r\n                deferred.reject(data, status, headers, config);\r\n            }));\r\n            return deferred.promise;\r\n        },\r\n        'register': function(username,password1,password2,email,more){\r\n            var data = {\r\n                'username':username,\r\n                'password1':password1,\r\n                'password2':password2,\r\n                'email':email\r\n            }\r\n            data = angular.extend(data,more);\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/registration/\",\r\n                'data' :data\r\n            });\r\n        },\r\n        'login': function(username,password){\r\n            var djangoAuth = this;\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/login/\",\r\n                'data':{\r\n                    'username':username,\r\n                    'password':password\r\n                }\r\n            }).then(function(data){\r\n                if(!djangoAuth.use_session){\r\n                    $http.defaults.headers.common.Authorization = 'Token ' + data.key;\r\n                    $cookies.put(\"token\", data.key);\r\n                }\r\n                djangoAuth.authenticated = true;\r\n                $rootScope.$broadcast(\"djangoAuth.logged_in\", data);\r\n            });\r\n        },\r\n        'logout': function(){\r\n            var djangoAuth = this;\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/logout/\"\r\n            }).then(function(data){\r\n            delete $http.defaults.headers.common.Authorization;\r\n                $cookies.remove('token');\r\n                djangoAuth.authenticated = false;\r\n                $rootScope.$broadcast(\"djangoAuth.logged_out\");\r\n            });\r\n        },\r\n        'changePassword': function(password1,password2){\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/password/change/\",\r\n                'data':{\r\n                    'new_password1':password1,\r\n                    'new_password2':password2\r\n                }\r\n            });\r\n        },\r\n        'resetPassword': function(email){\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/password/reset/\",\r\n                'data':{\r\n                    'email':email\r\n                }\r\n            });\r\n        },\r\n        'profile': function(){\r\n            return this.request({\r\n                'method': \"GET\",\r\n                'url': \"/user/\"\r\n            }); \r\n        },\r\n        'updateProfile': function(data){\r\n            return this.request({\r\n                'method': \"PATCH\",\r\n                'url': \"/user/\",\r\n                'data':data\r\n            }); \r\n        },\r\n        'verify': function(key){\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/registration/verify-email/\",\r\n                'data': {'key': key} \r\n            });            \r\n        },\r\n        'confirmReset': function(uid,token,password1,password2){\r\n            return this.request({\r\n                'method': \"POST\",\r\n                'url': \"/password/reset/confirm/\",\r\n                'data':{\r\n                    'uid': uid,\r\n                    'token': token,\r\n                    'new_password1':password1,\r\n                    'new_password2':password2\r\n                }\r\n            });\r\n        },\r\n        'authenticationStatus': function(restrict, force){\r\n            // Set restrict to true to reject the promise if not logged in\r\n            // Set to false or omit to resolve when status is known\r\n            // Set force to true to ignore stored value and query API\r\n            restrict = restrict || false;\r\n            force = force || false;\r\n            if(this.authPromise == null || force){\r\n                this.authPromise = this.request({\r\n                    'method': \"GET\",\r\n                    'url': \"/user/\"\r\n                })\r\n            }\r\n            var da = this;\r\n            var getAuthStatus = $q.defer();\r\n            if(this.authenticated != null && !force){\r\n                // We have a stored value which means we can pass it back right away.\r\n                if(this.authenticated == false && restrict){\r\n                    getAuthStatus.reject(\"User is not logged in.\");\r\n                }else{\r\n                    getAuthStatus.resolve();\r\n                }\r\n            }else{\r\n                // There isn't a stored value, or we're forcing a request back to\r\n                // the API to get the authentication status.\r\n                this.authPromise.then(function(){\r\n                    da.authenticated = true;\r\n                    getAuthStatus.resolve();\r\n                },function(){\r\n                    da.authenticated = false;\r\n                    if(restrict){\r\n                        getAuthStatus.reject(\"User is not logged in.\");\r\n                    }else{\r\n                        getAuthStatus.resolve();\r\n                    }\r\n                });\r\n            }\r\n            return getAuthStatus.promise;\r\n        },\r\n        'initialize': function(url, sessions){\r\n            this.API_URL = url;\r\n            this.use_session = sessions;\r\n            return this.authenticationStatus();\r\n        }\r\n\r\n    }\r\n    return service;\r\n  });\r\n","'use strict';\r\n\r\nangular.module('auth')\r\n  .service('Validate', function Validate() {\r\n    return {\r\n        'message': {\r\n            'minlength': 'This value is not long enough.',\r\n            'maxlength': 'This value is too long.',\r\n            'email': 'A properly formatted email address is required.',\r\n            'required': 'This field is required.'\r\n        },\r\n        'more_messages': {\r\n            'demo': {\r\n                'required': 'Here is a sample alternative required message.'\r\n            }\r\n        },\r\n        'check_more_messages': function(name,error){\r\n            return (this.more_messages[name] || [])[error] || null;\r\n        },\r\n        validation_messages: function(field,form,error_bin){\r\n            var messages = [];\r\n            for(var e in form[field].$error){\r\n                if(form[field].$error[e]){\r\n                    var special_message = this.check_more_messages(field,e);\r\n                    if(special_message){\r\n                        messages.push(special_message);\r\n                    }else if(this.message[e]){\r\n                        messages.push(this.message[e]);\r\n                    }else{\r\n                        messages.push(\"Error: \" + e)\r\n                    }\r\n                }\r\n            }\r\n            var deduped_messages = [];\r\n            angular.forEach(messages, function(el, i){\r\n                if(deduped_messages.indexOf(el) === -1) deduped_messages.push(el);\r\n            });\r\n            if(error_bin){\r\n                error_bin[field] = deduped_messages;\r\n            }\r\n        },\r\n        'form_validation': function(form,error_bin){\r\n            for(var field in form){\r\n                if(field.substr(0,1) != \"$\"){\r\n                    this.validation_messages(field,form,error_bin);\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n",null],"sourceRoot":"/source/"}