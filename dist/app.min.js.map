{"version":3,"sources":["app/app.ts","auth/auth.ts","auth/services/djangoAuth.ts","auth/services/validate.ts","auth/controllers/authrequired.ts","auth/controllers/login.ts","auth/controllers/logout.ts","auth/controllers/main.ts","auth/controllers/master.ts","auth/controllers/passwordchange.ts","auth/controllers/passwordreset.ts","auth/controllers/passwordresetconfirm.ts","auth/controllers/register.ts","auth/controllers/restricted.ts","auth/controllers/userprofile.ts","auth/controllers/verifyemail.ts","templates.ts"],"names":["angular","module","config","$routeProvider","when","templateUrl","controller","resolve","authenticated","djangoAuth","authenticationStatus","otherwise","redirectTo","run","initialize","service","$q","$http","$cookies","$rootScope","API_URL","use_session","authPromise","request","args","get","defaults","headers","common","Authorization","params","deferred","defer","url","this","method","data","withCredentials","toUpperCase","X-CSRFToken","success","bind","status","error","console","log","reject","promise","register","username","password1","password2","email","more","extend","login","password","then","key","put","$broadcast","logout","remove","changePassword","new_password1","new_password2","resetPassword","profile","updateProfile","verify","confirmReset","uid","token","restrict","force","da","getAuthStatus","sessions","message","minlength","maxlength","required","more_messages","demo","check_more_messages","name","validation_messages","field","form","error_bin","messages","e","$error","special_message","push","deduped_messages","forEach","el","i","indexOf","form_validation","substr","$scope","awesomeThings","$location","Validate","model","complete","formData","errors","$invalid","path","prompt","handleSuccess","handleError","goVerify","first_name","last_name","goConfirmReset","response","show_login","$on","ev","current","previous","rejection","replace","$routeParams","failure","$templateCache"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/main.d.ts\" />\n\nangular.module('ebagis', [\n    'app.templates',\n    'auth'\n]);\n\n// your app setup here\n","'use strict';\n\nangular.module('auth', [\n  'app.templates',\n  'ngCookies',\n  'ngResource',\n  'ngSanitize',\n  'ngRoute',\n])\n  .config(function ($routeProvider) {\n    $routeProvider\n      .when('/', {\n      templateUrl: 'app-templates/auth/views/main.html',\n        controller: 'MainCtrl',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/register', {\n        templateUrl: 'app-templates/auth/views/register.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/passwordReset', {\n        templateUrl: 'app-templates/auth/views/passwordreset.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/passwordResetConfirm/:firstToken/:passwordResetToken', {\n        templateUrl: 'app-templates/auth/views/passwordresetconfirm.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/login', {\n        templateUrl: 'app-templates/auth/views/login.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/verifyEmail/:emailVerificationToken', {\n        templateUrl: 'app-templates/auth/views/verifyemail.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/logout', {\n        templateUrl: 'app-templates/auth/views/logout.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/userProfile', {\n        templateUrl: 'app-templates/auth/views/userprofile.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/passwordChange', {\n        templateUrl: 'app-templates/auth/views/passwordchange.html',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/restricted', {\n        templateUrl: 'app-templates/auth/views/restricted.html',\n        controller: 'RestrictedCtrl',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus();\n          }],\n        }\n      })\n      .when('/authRequired', {\n        templateUrl: 'app-templates/auth/views/authrequired.html',\n        controller: 'AuthrequiredCtrl',\n        resolve: {\n          authenticated: ['djangoAuth', function(djangoAuth){\n            return djangoAuth.authenticationStatus(true);\n          }],\n        }\n      })\n      .otherwise({\n        redirectTo: '/'\n      });\n  })\n  .run(function(djangoAuth){\n  djangoAuth.initialize('https://test.ebagis.geog.pdx.edu/api/rest/account', false);\n  });\n","'use strict';\n\nangular.module('auth')\n  .service('djangoAuth', function djangoAuth($q, $http, $cookies, $rootScope) {\n    // AngularJS will instantiate a singleton by calling \"new\" on this function\n    var service = {\n        /* START CUSTOMIZATION HERE */\n        // Change this to point to your Django REST Auth API\n        // e.g. /api/rest-auth  (DO NOT INCLUDE ENDING SLASH)\n        'API_URL': '/api/rest/account',\n        // Set use_session to true to use Django sessions to store security token.\n        // Set use_session to false to store the security token locally and transmit it as a custom header.\n        'use_session': false,\n        /* END OF CUSTOMIZATION */\n        'authenticated': null,\n        'authPromise': null,\n        'request': function(args) {\n            // Let's retrieve the token from the cookie, if available\n            if($cookies.get('token')){\n                $http.defaults.headers.common.Authorization = 'Token ' + $cookies.get('token');\n            }\n            // Continue\n            params = args.params || {}\n            args = args || {};\n            var deferred = $q.defer(),\n                url = this.API_URL + args.url,\n                method = args.method || \"GET\",\n                params = params,\n                data = args.data || {};\n            // Fire the request, as configured.\n            $http({\n                url: url,\n                withCredentials: this.use_session,\n                method: method.toUpperCase(),\n                headers: {'X-CSRFToken': $cookies['csrftoken']},\n                params: params,\n                data: data\n            })\n            .success(angular.bind(this,function(data, status, headers, config) {\n                deferred.resolve(data, status);\n            }))\n            .error(angular.bind(this,function(data, status, headers, config) {\n                console.log(\"error syncing with: \" + url);\n                // Set request status\n                if(data){\n                    data.status = status;\n                }\n                if(status == 0){\n                    if(data == \"\"){\n                        data = {};\n                        data['status'] = 0;\n                        data['non_field_errors'] = [\"Could not connect. Please try again.\"];\n                    }\n                    // or if the data is null, then there was a timeout.\n                    if(data == null){\n                        // Inject a non field error alerting the user\n                        // that there's been a timeout error.\n                        data = {};\n                        data['status'] = 0;\n                        data['non_field_errors'] = [\"Server timed out. Please try again.\"];\n                    }\n                }\n                deferred.reject(data, status, headers, config);\n            }));\n            return deferred.promise;\n        },\n        'register': function(username,password1,password2,email,more){\n            var data = {\n                'username':username,\n                'password1':password1,\n                'password2':password2,\n                'email':email\n            }\n            data = angular.extend(data,more);\n            return this.request({\n                'method': \"POST\",\n                'url': \"/registration/\",\n                'data' :data\n            });\n        },\n        'login': function(username,password){\n            var djangoAuth = this;\n            return this.request({\n                'method': \"POST\",\n                'url': \"/login/\",\n                'data':{\n                    'username':username,\n                    'password':password\n                }\n            }).then(function(data){\n                if(!djangoAuth.use_session){\n                    $http.defaults.headers.common.Authorization = 'Token ' + data.key;\n                    $cookies.put(\"token\", data.key);\n                }\n                djangoAuth.authenticated = true;\n                $rootScope.$broadcast(\"djangoAuth.logged_in\", data);\n            });\n        },\n        'logout': function(){\n            var djangoAuth = this;\n            return this.request({\n                'method': \"POST\",\n                'url': \"/logout/\"\n            }).then(function(data){\n            delete $http.defaults.headers.common.Authorization;\n                $cookies.remove('token');\n                djangoAuth.authenticated = false;\n                $rootScope.$broadcast(\"djangoAuth.logged_out\");\n            });\n        },\n        'changePassword': function(password1,password2){\n            return this.request({\n                'method': \"POST\",\n                'url': \"/password/change/\",\n                'data':{\n                    'new_password1':password1,\n                    'new_password2':password2\n                }\n            });\n        },\n        'resetPassword': function(email){\n            return this.request({\n                'method': \"POST\",\n                'url': \"/password/reset/\",\n                'data':{\n                    'email':email\n                }\n            });\n        },\n        'profile': function(){\n            return this.request({\n                'method': \"GET\",\n                'url': \"/user/\"\n            }); \n        },\n        'updateProfile': function(data){\n            return this.request({\n                'method': \"PATCH\",\n                'url': \"/user/\",\n                'data':data\n            }); \n        },\n        'verify': function(key){\n            return this.request({\n                'method': \"POST\",\n                'url': \"/registration/verify-email/\",\n                'data': {'key': key} \n            });            \n        },\n        'confirmReset': function(uid,token,password1,password2){\n            return this.request({\n                'method': \"POST\",\n                'url': \"/password/reset/confirm/\",\n                'data':{\n                    'uid': uid,\n                    'token': token,\n                    'new_password1':password1,\n                    'new_password2':password2\n                }\n            });\n        },\n        'authenticationStatus': function(restrict, force){\n            // Set restrict to true to reject the promise if not logged in\n            // Set to false or omit to resolve when status is known\n            // Set force to true to ignore stored value and query API\n            restrict = restrict || false;\n            force = force || false;\n            if(this.authPromise == null || force){\n                this.authPromise = this.request({\n                    'method': \"GET\",\n                    'url': \"/user/\"\n                })\n            }\n            var da = this;\n            var getAuthStatus = $q.defer();\n            if(this.authenticated != null && !force){\n                // We have a stored value which means we can pass it back right away.\n                if(this.authenticated == false && restrict){\n                    getAuthStatus.reject(\"User is not logged in.\");\n                }else{\n                    getAuthStatus.resolve();\n                }\n            }else{\n                // There isn't a stored value, or we're forcing a request back to\n                // the API to get the authentication status.\n                this.authPromise.then(function(){\n                    da.authenticated = true;\n                    getAuthStatus.resolve();\n                },function(){\n                    da.authenticated = false;\n                    if(restrict){\n                        getAuthStatus.reject(\"User is not logged in.\");\n                    }else{\n                        getAuthStatus.resolve();\n                    }\n                });\n            }\n            return getAuthStatus.promise;\n        },\n        'initialize': function(url, sessions){\n            this.API_URL = url;\n            this.use_session = sessions;\n            return this.authenticationStatus();\n        }\n\n    }\n    return service;\n  });\n","'use strict';\n\nangular.module('auth')\n  .service('Validate', function Validate() {\n    return {\n        'message': {\n            'minlength': 'This value is not long enough.',\n            'maxlength': 'This value is too long.',\n            'email': 'A properly formatted email address is required.',\n            'required': 'This field is required.'\n        },\n        'more_messages': {\n            'demo': {\n                'required': 'Here is a sample alternative required message.'\n            }\n        },\n        'check_more_messages': function(name,error){\n            return (this.more_messages[name] || [])[error] || null;\n        },\n        validation_messages: function(field,form,error_bin){\n            var messages = [];\n            for(var e in form[field].$error){\n                if(form[field].$error[e]){\n                    var special_message = this.check_more_messages(field,e);\n                    if(special_message){\n                        messages.push(special_message);\n                    }else if(this.message[e]){\n                        messages.push(this.message[e]);\n                    }else{\n                        messages.push(\"Error: \" + e)\n                    }\n                }\n            }\n            var deduped_messages = [];\n            angular.forEach(messages, function(el, i){\n                if(deduped_messages.indexOf(el) === -1) deduped_messages.push(el);\n            });\n            if(error_bin){\n                error_bin[field] = deduped_messages;\n            }\n        },\n        'form_validation': function(form,error_bin){\n            for(var field in form){\n                if(field.substr(0,1) != \"$\"){\n                    this.validation_messages(field,form,error_bin);\n                }\n            }\n        }\n    }\n});\n","'use strict';\n\n/**\n * @ngdoc function\n * @name angularDjangoRegistrationAuthApp.controller:AuthrequiredCtrl\n * @description\n * # AuthrequiredCtrl\n * Controller of the angularDjangoRegistrationAuthApp\n */\nangular.module('auth')\n  .controller('AuthrequiredCtrl', function ($scope) {\n    $scope.awesomeThings = [\n      'HTML5 Boilerplate',\n      'AngularJS',\n      'Karma'\n    ];\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('LoginCtrl', function ($scope, $location, djangoAuth, Validate) {\n    $scope.model = {'username':'','password':''};\n  \t$scope.complete = false;\n    $scope.login = function(formData){\n      $scope.errors = [];\n      Validate.form_validation(formData,$scope.errors);\n      if(!formData.$invalid){\n        djangoAuth.login($scope.model.username, $scope.model.password)\n        .then(function(data){\n        \t// success case\n        \t$location.path(\"/\");\n        },function(data){\n        \t// error case\n        \t$scope.errors = data;\n        });\n      }\n    }\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('LogoutCtrl', function ($scope, $location, djangoAuth) {\n    djangoAuth.logout();\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('MainCtrl', function ($scope, $cookies, $location, djangoAuth) {\n    \n    $scope.login = function(){\n      djangoAuth.login(prompt('Username'),prompt('password'))\n      .then(function(data){\n        handleSuccess(data);\n      },handleError);\n    }\n    \n    $scope.logout = function(){\n      djangoAuth.logout()\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.resetPassword = function(){\n      djangoAuth.resetPassword(prompt('Email'))\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.register = function(){\n      djangoAuth.register(prompt('Username'),prompt('Password'),prompt('Email'))\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.verify = function(){\n      djangoAuth.verify(prompt(\"Please enter verification code\"))\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.goVerify = function(){\n      $location.path(\"/verifyEmail/\"+prompt(\"Please enter verification code\"));\n    }\n    \n    $scope.changePassword = function(){\n      djangoAuth.changePassword(prompt(\"Password\"), prompt(\"Repeat Password\"))\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.profile = function(){\n      djangoAuth.profile()\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.updateProfile = function(){\n      djangoAuth.updateProfile({'first_name': prompt(\"First Name\"), 'last_name': prompt(\"Last Name\"), 'email': prompt(\"Email\")})\n      .then(handleSuccess,handleError);\n    }\n    \n    $scope.confirmReset = function(){\n      djangoAuth.confirmReset(prompt(\"Code 1\"), prompt(\"Code 2\"), prompt(\"Password\"), prompt(\"Repeat Password\"))\n      .then(handleSuccess,handleError);\n    }\n\n    $scope.goConfirmReset = function(){\n      $location.path(\"/passwordResetConfirm/\"+prompt(\"Code 1\")+\"/\"+prompt(\"Code 2\"))\n    }\n    \n    var handleSuccess = function(data){\n      $scope.response = data;\n    }\n    \n    var handleError = function(data){\n      $scope.response = data;\n    }\n\n    $scope.show_login = true;\n    $scope.$on(\"djangoAuth.logged_in\", function(data){\n      $scope.show_login = false;\n    });\n    $scope.$on(\"djangoAuth.logged_out\", function(data){\n      $scope.show_login = true;\n    });\n\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('MasterCtrl', function ($scope, $location, djangoAuth) {\n    // Assume user is not logged in until we hear otherwise\n    $scope.authenticated = false;\n    // Wait for the status of authentication, set scope var to true if it resolves\n    djangoAuth.authenticationStatus(true).then(function(){\n        $scope.authenticated = true;\n    });\n    // Wait and respond to the logout event.\n    $scope.$on('djangoAuth.logged_out', function() {\n      $scope.authenticated = false;\n    });\n    // Wait and respond to the log in event.\n    $scope.$on('djangoAuth.logged_in', function() {\n      $scope.authenticated = true;\n    });\n    // If the user attempts to access a restricted page, redirect them back to the main page.\n    $scope.$on('$routeChangeError', function(ev, current, previous, rejection){\n      console.error(\"Unable to change routes.  Error: \", rejection)\n      $location.path('/restricted').replace();\n    });\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('PasswordchangeCtrl', function ($scope, djangoAuth, Validate) {\n    $scope.model = {'new_password1':'','new_password2':''};\n  \t$scope.complete = false;\n    $scope.changePassword = function(formData){\n      $scope.errors = [];\n      Validate.form_validation(formData,$scope.errors);\n      if(!formData.$invalid){\n        djangoAuth.changePassword($scope.model.new_password1, $scope.model.new_password2)\n        .then(function(data){\n        \t// success case\n        \t$scope.complete = true;\n        },function(data){\n        \t// error case\n        \t$scope.errors = data;\n        });\n      }\n    }\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('PasswordresetCtrl', function ($scope, djangoAuth, Validate) {\n    $scope.model = {'email':''};\n  \t$scope.complete = false;\n    $scope.resetPassword = function(formData){\n      $scope.errors = [];\n      Validate.form_validation(formData,$scope.errors);\n      if(!formData.$invalid){\n        djangoAuth.resetPassword($scope.model.email)\n        .then(function(data){\n        \t// success case\n        \t$scope.complete = true;\n        },function(data){\n        \t// error case\n        \t$scope.errors = data;\n        });\n      }\n    }\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('PasswordresetconfirmCtrl', function ($scope, $routeParams, djangoAuth, Validate) {\n    $scope.model = {'new_password1':'','new_password2':''};\n  \t$scope.complete = false;\n    $scope.confirmReset = function(formData){\n      $scope.errors = [];\n      Validate.form_validation(formData,$scope.errors);\n      if(!formData.$invalid){\n        djangoAuth.confirmReset($routeParams['firstToken'], $routeParams['passwordResetToken'], $scope.model.new_password1, $scope.model.new_password2)\n        .then(function(data){\n        \t// success case\n        \t$scope.complete = true;\n        },function(data){\n        \t// error case\n        \t$scope.errors = data;\n        });\n      }\n    }\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('RegisterCtrl', function ($scope, djangoAuth, Validate) {\n  \t$scope.model = {'username':'','password':'','email':''};\n  \t$scope.complete = false;\n    $scope.register = function(formData){\n      $scope.errors = [];\n      Validate.form_validation(formData,$scope.errors);\n      if(!formData.$invalid){\n        djangoAuth.register($scope.model.username,$scope.model.password1,$scope.model.password2,$scope.model.email)\n        .then(function(data){\n        \t// success case\n        \t$scope.complete = true;\n        },function(data){\n        \t// error case\n        \t$scope.errors = data;\n        });\n      }\n    }\n  });\n","'use strict';\n\n/**\n * @ngdoc function\n * @name angularDjangoRegistrationAuthApp.controller:RestrictedCtrl\n * @description\n * # RestrictedCtrl\n * Controller of the angularDjangoRegistrationAuthApp\n */\nangular.module('auth')\n  .controller('RestrictedCtrl', function ($scope, $location) {\n    $scope.$on('djangoAuth.logged_in', function() {\n      $location.path('/');\n    });\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('UserprofileCtrl', function ($scope, djangoAuth, Validate) {\n    $scope.model = {'first_name':'','last_name':'','email':''};\n  \t$scope.complete = false;\n  \tdjangoAuth.profile().then(function(data){\n  \t\t$scope.model = data;\n  \t});\n    $scope.updateProfile = function(formData, model){\n      $scope.errors = [];\n      Validate.form_validation(formData,$scope.errors);\n      if(!formData.$invalid){\n        djangoAuth.updateProfile(model)\n        .then(function(data){\n        \t// success case\n        \t$scope.complete = true;\n        },function(data){\n        \t// error case\n        \t$scope.error = data;\n        });\n      }\n    }\n  });\n","'use strict';\n\nangular.module('auth')\n  .controller('VerifyemailCtrl', function ($scope, $routeParams, djangoAuth) {\n    djangoAuth.verify($routeParams[\"emailVerificationToken\"]).then(function(data){\n    \t$scope.success = true;\n    },function(data){\n    \t$scope.failure = false;\n    });\n  });\n",null],"sourceRoot":"/source/"}